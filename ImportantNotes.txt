
*Javascript Notes*
  Chapter 1:

Define Javascript: JAVASCRIPT IS A HIGH-LEVEL,OBJECT-ORIENTED, MULTI-PARADIGM PROGRAMMING LANGUAGE.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
Datatypes:
 There were seven datatypes is Javascript:
 1. Number: Floating point numbers. Used for decimals and integers. Ex: let age= 23;
 2. String: Sequence of characters . Used for text . Ex: let name= 'abcd';
 3. Boolean: Logical type that can only be true or false. Used for taking decisions. Ex: let canDrive= true;
 4. Undefined: Value taken by a variable that is not yet defined (‘empty value’)
 5. Null: Also means ‘empty value’
 6. Symbol (ES2015): Value that is unique and cannot be changed [Not useful for now]
 7. BigInt (ES2020): Larger integers than the Number type can hold

NOTE: JavaScript has dynamic typing: We do not have to manually define the data type of the value stored in a variable. Instead, data types are determined             automatically.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
BOOLEAN LOGIC:
 1. AND(&&): True when all conditions are true.
 2. OR(||): True when any one of the given conditions is true.
 3. NOT(!): Inverts true/false value.

NOTE: For linking javascript file to you html just under the script tag put the name of your javascript file with ".js" . EX: <script src= "script.js"></script>
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
VALUE & VARIABLE:

Value: It is a piece of data.
       Ex: 'name' , 15
Variable: It is like a space in memory that programmer create to hold diffrent values so that they can use it further in program.
          Ex: number = 15

NOTE: Every value in javascript is of two types 1. Primitive i.e.: let name = 'abcd' or let number = 15
                                                2. Object i.e.: let name { name= 'abcd' };
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
let, const, var

let: 1. Can be re-assigned after declaration.
        Ex: If we declare a variable "let age = 30;" we can re-assign in further program as "age = 31;"
     2. The scope of a let variable is only block scoped. It can’t be accessible outside the particular block ({block})
     3. If users use the let variable before the declaration, it does not initialize with undefined it will throw error.

const: 1. const keyword has all the properties that are the same as the let keyword, except the user cannot update it.
       2. The scope of a const variable is only block scoped. The user cannot update the const variable once it is declared.

var: 1. The scope of a var variable is functional scope or global scoped.
     2. The user can re-declare the variable using var and the user can update var variable.
     3. If users use the var variable before the declaration, it initializes with the undefined value.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
OPERATOR: Operators are used to transform or combine multiple values.
Types of operators
 1. Arithmetic Operators: Used to perform arithmetic operations on numbers. i.e.: let sum= 2+3;
                          Addtion(+), Subtraction(-), Multiplication(*), Exponentiation(**), Division(/), Modulus(%), Increment(++), Decrement(--).

 2. Assignment operators: Used to assign values to JavaScript variables. (= , += , -=, *=, /=, %=, **=)

 3. Comparison Operators: Used to compare two values and always return boolean value(TRUE/FALSE).
                          Equal to(==), equal value and equal type(===), not equal(!=), not equal value or not equal type(!==), greater than(>), less than(<),
                          greater than equal to(>=), less than equal to(<=), ternary operator(?)

 4. Logical Operators: Comparison operators are used in logical statements to determine equality or difference between variables or values.
                       logical AND(&&), logical OR(||), logical NOT(!).

 5. Type Operators: typeof - Returns the type of variable.
                    instanceof - Returns true if an object is an instance of an object type

 6. Bitwise Operators: Bit operators work on 32 bits numbers.Any numeric operand in the operation is converted into a 32 bit number. The result is converted back to a                         JavaScript number. EX. "5 & 1" is same as "0101 & 0001"
                       AND(&), OR(|), NOT(~), XOR(^),left shift(<<), right shift(>>), unsigned right shift(>>>).

NOTE: '+' is the only overloaded operator in javasript. It can be used to add and concatenate strings. If you add a number and a string, the result will be a string!
 -----------------------------------------------------------------------------------------------------------------------------------------------------------------------
Template Literals:

1. Use back-ticks (``) rather than the quotes ("") to define a string. Ex: let text = `Hello World!`;
2. With template literals, you can use both single and double quotes inside a string. Ex: let text = `He's often called "Johnny"`;
3. Template literals provide an easy way to interpolate variables and expressions into strings.The method is called string interpolation. Syntax: ${...}
4. Template literals allow variables in strings. Ex: let text = `Welcome ${firstName}, ${lastName}!`;
5. Automatic replacing of variables or experession with real values is called string interpolation.
6. Template literals allow expressions in strings. Ex: let total = `Total: ${(price * (1 + VAT)).toFixed(2)}`;
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
if/else Statement: Used to perform different actions based on different conditions.

1. if Statement: The if statement to specify a block of JavaScript code to be executed if a condition is true.
                 if (condition) {
                      //  block of code to be executed if the condition is true
                 }
2.else Statement: The else statement to specify a block of code to be executed if the condition is false.
                  if (condition) {
                      //  block of code to be executed if the condition is true
                  } else {
                     //  block of code to be executed if the condition is false
                  }
3.else if Statement: Use the else if statement to specify a new condition if the first condition is false.
                    if (condition1) {
                      //  block of code to be executed if condition1 is true
                     } else if (condition2) {
                      //  block of code to be executed if the condition1 is false and condition2 is true
                     } else {
                       //  block of code to be executed if the condition1 is false and condition2 is false
                     }
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
TYPE CONVERSION vs COERCION:

Conversion: When we manually convert the type of variable.
            Ex: const inputYear = '1991';
                console.log(inputYear+18); 199118
                console.log(Number(inputYear) + 18); 1991+18= 2009
NOTE: If you try to convert a srting to number type then we get 'NaN' as ouput.
            Ex: console.log(Number('abcd'); NaN

Coercion: When javascript convert the type of variable automatically.
          Ex. console.log('I am ' + 23 + ' years old'); // I am 23 years old
NOTE:Except '+' other Arithmetic operator converts srting to number when performed together.
         Ex: console.log('23' - '10' - 3); //10
             console.log('23' * '2'); //46
             console.log('1'+ '1'); //11
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
Truthy and Falsy value:
 1. Falsy value: Value which are not exactly false but will come false when we try to convert them to boolean.
    5 falsy values: 0, '', undefined, null, NaN
    Ex.: console.log(Boolean(0)); // false
         console.log(Boolean('abcd')); //true 
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
== vs ===
1.Double equals (==) will perform a type conversion when comparing two things.It is also called as loose equality.
  Ex: console.log('18' == 18); true
2.Triple equals (===) will do the same comparison as double equals but without type conversion; if the types differ, false is returned.
  Ex. console.log('18' == 18); //false
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
Switch Statement: The switch statement is used to perform different actions based on different conditions.
Syntax: switch(expression) {
          case x:
           // code block
           break;
          case y:
           // code block
          break;
         default:                 // The default keyword specifies the code to run if there is no case match:

         // code block
    }

Note: If you omit the break statement, the next case will be executed even if the evaluation does not match the case.
      Switch cases use strict comparison (===).
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
Statement vs Experssion:

1. Experssion: It is a piece of code which produces a value. Ex.3 + 4 , 1991 ,  true && false && !false
              
2. Statement: It a piece of code which produces a value or a sequance of action is also called as statement.
   Ex.: if (23 > 10) {
        const str = '23 is bigger';
       }
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
Conditional (Ternery) operator: A ternary operator can be used to replace an if..else statement in certain situations.
                                A ternary operator evaluates a condition and executes a block of code based on the condition.

                                Syntax: condition ? expression1 : expression2

                                 If the condition is true, expression1 is executed.
                                 If the condition is false, expression2 is executed. 

Ex: const age = 23;
    // age >= 18 ? console.log('I like to drink wine') : console.log('I like to drink water');     
----------------------------------------------------------------------------------------------------------------------------------------------------------------------- 
'strict mode' :
1. "use strict"; Defines that JavaScript code should be executed in "strict mode".
2. Strict mode is declared by adding "use strict"; to the beginning of a script or a function.
----------------------------------------------------------------------------------------------------------------------------------------------------------------------- 
Function in JavaScript:It is a block of code designed to perform a particular task.

Syntax: function name(parameter1, parameter2, parameter3) {
         // code to be executed
        }    
Ex: let x = myFunction(4, 3);   // Function is called, return value will end up in x

function myFunction(a, b) {
         return a * b;             // Function returns the product of a and b
       }

Function Declaration: A function declaration also known as a function statement declares a function with a function keyword. The function declaration must have a                       function name.
                      Syntax: function func(paramA, paramB) {
                                // Set of statements
                               } 

Function Expression: A function Expression is similar to a function declaration without the function name. Function expressions can be stored in a variable assignment.
                     Syntax: let func= function(paramA, paramB) {
                              // Set of statements
                             }

Arrow Function: Syntax: let hello = () => {
                        return "Hello World!";
                         }

Function calling other function: In JavaScript we call one function inside the other function.

Ex: 
function cutFruitPieces(fruit) {
  return fruit * 4;
}

function fruitProcessor(apples, oranges) {
  const applePieces = cutFruitPieces(apples);
  const orangePieces = cutFruitPieces(oranges);

  const juice = `Juice with ${applePieces} piece of apple and ${orangePieces} pieces of orange.`;
  return juice;
}
console.log(fruitProcessor(2, 3));
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
Arrays: An array is a special variable, which can hold more than one value.
        Syntax: const array_name = [item1, item2, ...];
                const array_name = new Array(item1, item2, ....); 
        Ex: const cars = ["Saab", "Volvo", "BMW"];

Accessing array element: An array element can be accessed by referring to the index number. i.e.: console.log(array_name[index]);

Array element can be changed later in program.
Ex: const cars = ["Saab", "Volvo", "BMW"];
    cars[0] = "Alto"; // changes the 0th index of array cars.

Array operation:

push(): Adds new elements to the end of an array, and returns the new length. Syntax: array_name.push(value);

Note: There are more array operation method in javascript that can be explored through internet.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
Objects: Objects are variables too. But objects can contain many values. Object values are written as name : value pairs (name and value separated by a colon). 
         Ex: let person = {firstName:"John", lastName:"Doe", age:50, eyeColor:"blue"};
         The named value in objects is called as Property.

Retrive data from object: Data from object can be retrived by using two method i.e.-
 1. Dot notation(.): let person = {firstName:"John", lastName:"Doe", age:50, eyeColor:"blue"};
                     console.log(person.lastName); // "Doe"
 2. Bracket Notation([]): let person = {firstName:"John", lastName:"Doe", age:50, eyeColor:"blue"};
                     console.log(person[lastName]); // "Doe"
NOTE: In bracket notation we can use any expression in place of string while retriving the data from object.
      Ex: let person = {firstName:"John", lastName:"Doe", age:50, eyeColor:"blue"};
          const nameKey= Name;
          console.log(person['fisrt' + nameKey]);
          console.log(person['last' + nameKey]);

Updating the object:
1. Using Dot notation: person.location= 'India'
2. Using Bracket notation: person[location]= 'India'

Methods in Object: Methods are functions stored as object properties.
                   Syntax to access method from object: objectName.methodName();

What is "this" in javascript:
 1)the this keyword refers to an object.
 2)In strict mode, this is undefined.
 3)In an event, this refers to the element that received the event.
 4)Methods like call(), apply(), and bind() can refer this to any object.

Ex: const jonas = {
  firstName: 'Jonas',
  lastName: 'Schmedtmann',
  birthYeah: 1991,
  job: 'teacher',
  friends: ['Michael', 'Peter', 'Steven'],
  hasDriversLicense: true,
}
calcAge: function () {
    this.age = 2037 - this.birthYeah;
    return this.age;
  },
console.log(jonas.age);
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
LOOP: Loops are handy, if you want to run the same code over and over again, each time with a different value. Loops are very handy when working with arrays.


FOR LOOP : The for statement creates a loop with 3 optional expressions:
           1. Expression 1 is executed (one time) before the execution of the code block.

           2. Expression 2 defines the condition for executing the code block.

           3. Expression 3 is executed (every time) after the code block has been executed.
Syntax: for (expression 1; expression 2; expression 3) {
            // code block to be executed
        }

Break statement: The break statement "jumps out" of a loop.
                 Ex: for (let i = 0; i < 10; i++) {
                        if (i === 3) { break; }
                      text += "The number is " + i + "<br>";
                     }
In the example above, the break statement ends the loop ("breaks" the loop) when the loop counter (i) is 3

Continue statement: The continue statement "jumps over" one iteration in the loop.
                    Ex: for (let i = 0; i < 10; i++) {
                        if (i === 3) { continue; }
                        text += "The number is " + i + "<br>";
                        }
In the example above, the continue statement skips the value of 3 when the loop counter(i) is 3.

Loop Backward: We can access the array element in in backward direction by runnung the loop in backward direction.
               Ex: const number = [1, 2, 3, 4, 5, 6, 7,];
                   for(i= number.length; i>=0; i--){
                      console.log(number[i])
                   }

Nested for loop: A nested for loop on the other hand, resides one or more for loop inside an outer for loop.
                 Syntx: for(let i = 0 ; i < limit; i++){
                        for(let j = 0 ; j < limit; j++){
                          // statement
                   }
                       // statement for outer loop
                 }

While Loop: The while loop loops through a block of code as long as a specified condition is true. This loop is used when developer don't know how many times the             counter need to run.
            Syntx: while (condition) {
                   // code block to be executed
                 }
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------DOM: It stands for "Document object model". It is a structured represantation of HTML document that allows Javascript to access HTML element and style to manipulate         them.The HTML DOM model is constructed as a tree of Objects.

DOM Method:
1. querySelector(): The querySelector() method returns the first element that matches a CSS selector. To return all matches (not only the first), use the                     querySelectorAll() instead.
                    Both querySelector() and querySelectorAll() throw a SYNTAX_ERR exception if the selector(s) is invalid.
   Syntax:         document.querySelector(CSS selectors)
   Ex    :         Get the first <p> element in with class="example": document.querySelector("p.example");
                   Change the text of the element with id="demo": document.querySelector("#demo").innerHTML = "Hello World!";

2. addEventListener(): The addEventListener() method attaches an event handler to a document.
               Syntax: document.addEventListener(event, function, Capture)






